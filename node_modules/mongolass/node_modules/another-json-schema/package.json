{
  "name": "another-json-schema",
  "version": "2.1.0",
  "description": "Another JSON Schema, simple & flexible & intuitive.",
  "main": "index.js",
  "scripts": {
    "test": "istanbul cover ./node_modules/.bin/_mocha test --timeout=10000"
  },
  "keywords": [
    "json",
    "schema",
    "json-schema",
    "validate",
    "validator",
    "json-validate",
    "json-validator"
  ],
  "license": "MIT",
  "dependencies": {
    "is-buffer": "^1.1.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/nswbmw/another-json-schema"
  },
  "devDependencies": {
    "istanbul": "^0.4.2",
    "mocha": "^2.4.5"
  },
  "readme": "### another-json-schema\n\nAnother JSON Schema, simple & flexible & intuitive.\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n### Install\n\n```\nnpm i another-json-schema --save\n```\n\n### Usage\n\nsimple:\n\n```\nvar AJS = require('another-json-schema');\n\nvar userSchema = AJS('userSchema', {\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 }\n});\n\nvar user = {\n  name: 'nswbmw',\n  age: 17\n};\n\nconsole.log(userSchema.validate(user));\n/*\n{ valid: false,\n  error:\n   { [Error: ($.age: 17) ✖ (gte: 18)]\n     validator: 'gte',\n     actual: 17,\n     expected: { type: 'number', gte: 18 },\n     path: '$.age',\n     schema: 'userSchema' },\n  result: { name: 'nswbmw', age: 17 } }\n */\n```\n\ncomplex:\n\n```\nvar AJS = require('another-json-schema');\n\nvar userSchema = AJS('userSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'] }\n});\n\nvar commentSchema = AJS('commentSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  user: userSchema,\n  content: { type: 'string' }\n});\n\nvar postSchema = AJS('postSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  author: userSchema,\n  content: { type: 'string' },\n  comments: [commentSchema]\n});\n\nvar post = {\n  _id: 'post11111111111111111111',\n  author: {\n    _id: 'user11111111111111111111',\n    name: 'nswbmw',\n    age: 100,\n    gender: 'male',\n    pet: 'cat'\n  },\n  content: 'lalala',\n  comments: [{\n    _id: 'comment11111111111111111',\n    user: {\n      _id: 'wrong_id',\n      name: 'user1',\n      age: 100,\n      gender: 'male'\n    },\n    content: 'sofa'\n  }]\n};\n\nconsole.log(postSchema.validate(post));\n/*\n{ valid: false,\n  error:\n   { [Error: ($.comments[].user._id: \"wrong_id\") ✖ (pattern: /^[0-9a-z]{24}$/)]\n     validator: 'pattern',\n     actual: 'wrong_id',\n     expected: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n     path: '$.comments[].user._id',\n     schema: 'userSchema' },\n  result:\n   { _id: 'post11111111111111111111',\n     author:\n      { _id: 'user11111111111111111111',\n        name: 'nswbmw',\n        age: 100,\n        gender: 'male' },\n     content: 'lalala',\n     comments: [ [Object] ] } }\n */\n```\n\ncustom validate function(like: ObjectId):\n\n```\nvar validator = require('validator');\nvar toObjectId = require('mongodb').ObjectId;\nvar AJS = require('another-json-schema');\n\nvar postSchema = AJS('postSchema', {\n  author: {\n    type: function ObjectId(value) {\n      if (!value || !validator.isMongoId(value.toString())) {\n        throw new Error('author is not a valid ObjectId');\n      }\n      return toObjectId(value);\n    }\n  },\n  content: { type: 'string' }\n});\n\nvar post = {\n  author: '111111111111111111111111',\n  content: 'haha'\n};\n\nconsole.log(postSchema.validate(post));\n/*\n{ valid: true,\n  error: null,\n  result: { author: 111111111111111111111111, content: 'haha' } }\n */\n\n//validate specific field\nconsole.log(postSchema._children.author.validate('lalala'));\n/*\n{ valid: false,\n  error:\n   { [Error: ($.author: \"lalala\") ✖ (type: ObjectId)]\n     validator: 'type',\n     actual: 'lalala',\n     expected: { type: [Function: ObjectId] },\n     path: '$.author',\n     schema: 'postSchema',\n     originError: [Error: author is not a valid ObjectId] },\n  result: 'lalala' }\n */\n```\n\n**Note:** `type` validator is special, it can overwrite original value by value returned from function. others validator can only validate its value.\n\n### API\n\n#### AJS([name], schema)\n\nConstructor.\n\n#### AJS.register(name, fn)\n\nRegister a validator. eg:\n\n```\nAJS.register('gt', function (actual, expected, key, parentNode) {\n  return actual > expected;\n});\n```\n\n#### schema.compile([name], schema)\n\nCompile a schema. The following two ways are the same:\n\n```\nvar userSchema = AJS('userSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'] }\n});\n```\n\n```\nvar newSchema = new AJS();\nvar userSchema = newSchema.compile('userSchema', {\n  _id: { type: 'string', pattern: /^[0-9a-z]{24}$/ },\n  name: { type: 'string' },\n  age: { type: 'number', gte: 18 },\n  gender: { type: 'string', enum: ['male', 'female'] }\n});\n```\n\n#### compiledSchema.validate(data, [opts])\n\nUse the compiled template to validate a json. returns a object:\n\n- valid: {Boolean} wether a valid json\n- error: {Error|null}\n  - message: error message, eg: `($.comments[].user._id: \"wrong_id\") ✖ (pattern: /^[0-9a-z]{24}$/)`\n  - validator: validator name, eg: `pattern`,\n  - actual: actual value, eg: `wrong_id`,\n  - expected: expected schema, eg: `{ type: 'string', pattern: /^[0-9a-z]{24}$/ }`,\n  - path: path in object, eg: `$.comments[].user._id`,\n  - schema: schema name, eg: `userSchema`\n  - originError: original error thrown from validator\n- result: {Any}\n\nopts:\n\n- additionalProperties: {Boolean} if true, retain the original field. default `false`\n- ignoreNodeType: {Boolean} if true, ignore check node type, like: `[]`. default: `false`\n- gt, gte, lt, lte ...: {Boolean} if false, will not execute this validator.\n\n### Buit-in validator\n\n- type\n- gt\n- gte\n- lt\n- lte\n- range\n- enum\n- pattern\n\n### More examples\n\nsee [test](./test).\n\n### Test\n\n```\nnpm test (coverage 100%)\n```\n\n### License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/another-json-schema.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/another-json-schema\n[travis-image]: https://img.shields.io/travis/nswbmw/another-json-schema.svg?style=flat-square\n[travis-url]: https://travis-ci.org/nswbmw/another-json-schema\n[david-image]: http://img.shields.io/david/nswbmw/another-json-schema.svg?style=flat-square\n[david-url]: https://david-dm.org/nswbmw/another-json-schema\n[license-image]: http://img.shields.io/npm/l/another-json-schema.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/another-json-schema.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/another-json-schema\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/nswbmw/another-json-schema/issues"
  },
  "homepage": "https://github.com/nswbmw/another-json-schema",
  "_id": "another-json-schema@2.1.0",
  "dist": {
    "shasum": "a5b94cde6cf7588a6bff09822eb23cfb0c836ea3"
  },
  "_from": "another-json-schema@2.1.0",
  "_resolved": "https://registry.npmjs.org/another-json-schema/-/another-json-schema-2.1.0.tgz"
}
