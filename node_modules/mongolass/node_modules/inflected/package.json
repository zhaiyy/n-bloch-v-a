{
  "name": "inflected",
  "version": "1.1.7",
  "description": "A port of ActiveSupport's inflector to Node.js",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/martinandert/inflected.git"
  },
  "keywords": [
    "inflector",
    "inflection",
    "pluralize",
    "singularize",
    "camelize",
    "titleize",
    "tableize",
    "humanize",
    "capitalize",
    "dasherize",
    "ordinalize",
    "parameterize",
    "transliterate",
    "activesupport"
  ],
  "author": {
    "name": "Martin Andert",
    "email": "mandert@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/martinandert/inflected/issues"
  },
  "homepage": "https://github.com/martinandert/inflected",
  "devDependencies": {
    "jshint": "^2.5.10",
    "mocha": "^2.0.1",
    "object-assign": "^2.0.0"
  },
  "readme": "# inflected\n\nA port of ActiveSupport's inflector to Node.js.\n\n\n## Installation\n\nInstall via npm:\n\n```bash\n% npm install inflected\n```\n\n\n## Usage\n\nThe module exports an object with several utility functions.\n\n```js\nvar Inflector = require('inflected');\n\nInflector.pluralize('Category')  // => 'Categories'\n```\n\nHere is the complete API reference:\n\n\n### Inflector.pluralize\n\n```js\nstring pluralize(string word[, string locale])\n```\n\nReturns the plural form of the word in the string.\n\nIf passed an optional `locale` parameter, the word will be pluralized using rules defined for that language. By default, this parameter is set to \"en\".\n\n```js\nInflector.pluralize('post')             // => 'posts'\nInflector.pluralize('octopus')          // => 'octopi'\nInflector.pluralize('sheep')            // => 'sheep'\nInflector.pluralize('words')            // => 'words'\nInflector.pluralize('CamelOctopus')     // => 'CamelOctopi'\nInflector.pluralize('ley', 'es')        // => 'leyes'\n```\n\n\n### Inflector.singularize\n\n```js\nstring singularize(string word[, string locale])\n```\n\nThe reverse of `pluralize`, returns the singular form of a word in a string.\n\nIf passed an optional `locale` parameter, the word will be singularized using rules defined for that language. By default, this parameter is set to \"en\".\n\n```js\nInflector.singularize('posts')            // => 'post'\nInflector.singularize('octopi')           // => 'octopus'\nInflector.singularize('sheep')            // => 'sheep'\nInflector.singularize('word')             // => 'word'\nInflector.singularize('CamelOctopi')      // => 'CamelOctopus'\nInflector.singularize('leyes', 'es')      // => 'ley'\n```\n\n\n### Inflector.camelize\n\n```js\nstring camelize(string term[, boolean uppercaseFirstLetter])\n```\n\nBy default, `camelize` converts strings to UpperCamelCase. If the second argument is set to `false` then `camelize` produces lowerCamelCase.\n\n```js\nInflector.camelize('foo_bar')           // => 'FooBar'\nInflector.camelize('foo_bar', false)    // => 'fooBar'\n```\n\nAs a rule of thumb you can think of `camelize` as the inverse of `underscore`, though there are cases where that does not hold:\n\n```js\nInflector.camelize(Inflector.underscore('SSLError'))  //=> 'SslError'\n```\n\n### Inflector.underscore\n\n```js\nstring underscore(string camelCasedWord)\n```\n\nMakes an underscored, lowercase form from the expression in the string.\n\n```js\nInflector.underscore('FooBar')      // => 'foo_bar'\n```\n\nAs a rule of thumb you can think of `underscore` as the inverse of `camelize`, though there are cases where that does not hold:\n\n```js\nInflector.camelize(Inflector.underscore('SSLError'))  //=> 'SslError'\n```\n\n\n### Inflector.humanize\n\n```js\nstring humanize(string lowerCaseAndUnderscoredWord[, object options])\n```\n\nCapitalizes the first word, turns underscores into spaces, and strips a trailing \"_id\" if present.\n\nLike `titleize`, this is meant for creating pretty output.\n\nThe capitalization of the first word can be turned off by setting the `capitalize` option key to `false`. By default, this option is `true`.\n\n```js\nInflector.humanize('employee_salary')                   // => 'Employee salary'\nInflector.humanize('author_id')                         // => 'Author'\nInflector.humanize('author_id', { capitalize: false })  // => 'author'\n```\n\n\n### Inflector.titleize\n\n```js\nstring titleize(string sentence)\n```\n\nCapitalizes all the words and replaces some characters in the string to create a nicer looking title. `titleize` is meant for creating pretty output.\n\n```js\nInflector.titleize('man from the boondocks')   // => 'Man From The Boondocks'\nInflector.titleize('x-men: the last stand')    // => 'X Men: The Last Stand'\nInflector.titleize('TheManWithoutAPast')       // => 'The Man Without A Past'\nInflector.titleize('raiders_of_the_lost_ark')  // => 'Raiders Of The Lost Ark'\n```\n\n\n### Inflector.tableize\n\n```js\nstring tableize(string className)\n```\n\nCreate the name of a table like Rails does for models to table names. This method uses the `pluralize` method on the last word in the string.\n\n```js\nInflector.tableize('RawScaledScorer')  // => 'raw_scaled_scorers'\nInflector.tableize('egg_and_ham')      // => 'egg_and_hams'\nInflector.tableize('fancyCategory')    // => 'fancy_categories'\n```\n\n\n### Inflector.classify\n\n```js\nstring classify(string tableName)\n```\n\nCreate a class name from a plural table name like Rails does for table names to models.\n\n```js\nInflector.classify('egg_and_hams')  // => 'EggAndHam'\nInflector.classify('posts')         // => 'Post'\n```\n\nSingular names are not handled correctly:\n\n```js\nInflector.classify('business')    // => 'Busines'\n```\n\n\n### Inflector.dasherize\n\n```js\nstring dasherize(string underscoredWord)\n```\n\nReplaces underscores with dashes in the string.\n\n```js\nInflector.dasherize('puni_puni')  // => 'puni-puni'\n```\n\n\n### Inflector.foreignKey\n\n```js\nstring foreignKey(string className[, boolean separateClassNameAndIdWithUnderscore])\n```\n\nCreates a foreign key name from a class name. `separateClassNameAndIdWithUnderscore` sets whether the method should put \"_\" between the name and \"id\".\n\n```js\nInflector.foreignKey('Message')         // => 'message_id'\nInflector.foreignKey('Message', false)  // => 'messageid'\n```\n\n\n### Inflector.ordinal\n\n```js\nstring ordinal(object number)\n```\n\nReturns the suffix that should be added to a number to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.\n\n```js\nInflector.ordinal(1)      // => 'st'\nInflector.ordinal(2)      // => 'nd'\nInflector.ordinal(1002)   // => 'nd'\nInflector.ordinal(1003)   // => 'rd'\nInflector.ordinal(-11)    // => 'th'\nInflector.ordinal(-1021)  // => 'st'\n```\n\n\n### Inflector.ordinalize\n\n```js\nstring ordinalize(object number)\n```\n\nTurns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.\n\n```js\nInflector.ordinalize(1)      // => '1st'\nInflector.ordinalize(2)      // => '2nd'\nInflector.ordinalize(1002)   // => '1002nd'\nInflector.ordinalize(1003)   // => '1003rd'\nInflector.ordinalize(-11)    // => '-11th'\nInflector.ordinalize(-1021)  // => '-1021st'\n```\n\n\n### Inflector.inflections\n\n```js\nInflections inflections([string locale])\ninflections([string locale], [function(Inflections) fn])\n```\n\nA singleton instance of the internal Inflections class is yielded by this function, which can then be used to specify additional inflection rules. If passed an optional locale, rules for other languages can be specified. The default locale is \"en\". Only rules for English are provided by this library.\n\n```js\nInflector.inflections('en', function(inflect) {\n  inflect.plural(/^(ox)$/i, '$1$2en');\n  inflect.singular /^(ox)en/i, '$1');\n\n  inflect.irregular('octopus', 'octopi');\n\n  inflect.uncountable('equipment', 'snow');\n});\n```\n\nNew rules are added at the top. So in the example above, the irregular rule for octopus will now be the first of the pluralization and singularization rules that is run. This guarantees that your rules run before any of the rules that may already have been loaded.\n\n\n### Inflector.transliterate\n\n```js\nstring transliterate(string sentence[, object options])\n```\n\nReplaces non-ASCII characters with an ASCII approximation, or if none exists, a replacement character which defaults to \"?\".\n\n```js\nInflector.transliterate('Ærøskøbing')  // => 'AEroskobing'\n```\n\nDefault approximations are provided for Western/Latin characters,\ne.g, \"ø\", \"ñ\", \"é\", \"ß\", etc.\n\nThis method is I18n-aware, so you can set up custom approximations for a locale. This can be useful, for example, to transliterate German's \"ü\" and \"ö\" to \"ue\" and \"oe\", or to add support for transliterating Russian to ASCII.\n\nIn order to make your custom transliterations available, you must set them using the `approximate` helper function:\n\n```js\nInflector.transliterations('de', function(t) {\n  t.approximate('ü', 'ue');\n  t.approximate('ö', 'oe');\n});\n```\n\nNow you can have different transliterations for each locale:\n\n```js\nInflector.transliterate('Jürgen')                    // => 'Jurgen'\nInflector.transliterate('Jürgen', { locale: 'de' })  // => 'Juergen'\n```\n\n\n### Inflector.parameterize\n\n```js\nstring parameterize(string sentence[, object options])\n```\n\nReplaces special characters in a string so that it may be used as part of a 'pretty' URL.\n\n```js\nInflector.parameterize('Donald E. Knuth')                      // => 'donald-e-knuth'\nInflector.parameterize('Donald E. Knuth', { separator: '+' })  // => 'donald+e+knuth'\n```\n\n\n## Contributing\n\nHere's a quick guide:\n\n1. Fork the repo and `make install`.\n\n2. Run the tests. We only take pull requests with passing tests, and it's great to know that you have a clean slate: `make test`.\n\n3. Add a test for your change. Only refactoring and documentation changes require no new tests. If you are adding functionality or are fixing a bug, we need a test!\n\n4. Make the test pass.\n\n5. Push to your fork and submit a pull request.\n\n\n## Licence\n\nReleased under The MIT License.\n",
  "readmeFilename": "README.md",
  "_id": "inflected@1.1.7",
  "dist": {
    "shasum": "26b003486216cb9fe05ae40f2e05b471d935b9b5"
  },
  "_from": "inflected@1.1.7",
  "_resolved": "https://registry.npmjs.org/inflected/-/inflected-1.1.7.tgz"
}
