{
  "name": "mongolass",
  "version": "2.3.2",
  "description": "Elegant MongoDB driver for Node.js.",
  "main": "lib/index.js",
  "scripts": {
    "test": "node --harmony ./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha"
  },
  "keywords": [
    "mongo",
    "mongodb",
    "mongoose",
    "schema",
    "model",
    "query",
    "odm",
    "orm",
    "nosql",
    "data",
    "datastore",
    "database",
    "db",
    "collection",
    "document"
  ],
  "author": {
    "name": "nswbmw",
    "email": "nswbmw1992@gmail.com"
  },
  "maintainers": [
    {
      "name": "nswbmw",
      "email": "nswbmw1992@gmail.com"
    }
  ],
  "license": "MIT",
  "engines": {
    "node": ">=4"
  },
  "dependencies": {
    "another-json-schema": "2.1.0",
    "bluebird": "3.4.6",
    "co": "4.6.0",
    "debug": "2.2.0",
    "inflected": "1.1.7",
    "lodash": "4.16.6",
    "mongodb": "2.2.11",
    "mongolass-plugin-populate": "*",
    "validator": "6.1.0"
  },
  "devDependencies": {
    "co-mocha": "^1.1.3",
    "istanbul": "^0.4.5",
    "mocha": "^3.1.2"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mongolass/mongolass"
  },
  "readme": "## Mongolass\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\nElegant MongoDB driver for Node.js.\n\n## Installation\n\n```\n$ npm i mongolass --save\n```\n\n## Introduction\n\nJust like mongoose:\n\n```\n'use strict';\n\nconst Mongolass = require('mongolass');\nconst mongolass = new Mongolass();\nmongolass.connect('mongodb://localhost:27017/test');// const mongolass = new Mongolass('mongodb://localhost:27017/test');\n\nconst User = mongolass.model('User');\n\nUser\n  .find()\n  .select({ name: 1, age: 1 })\n  .sort({ name: -1 })\n  .exec()\n  .then(console.log)\n  .catch(console.error);\n```\n\nor use optional schema:\n\n```\n'use strict';\n\nconst Mongolass = require('mongolass');\nconst Schema = Mongolass.Schema;\nconst mongolass = new Mongolass('mongodb://localhost:27017/test');\n\nconst UserSchema = new Schema('UserSchema', {\n  name: { type: 'string' },\n  age: { type: 'number' }\n});\nconst User = mongolass.model('User', UserSchema);\n\n/*\nequal to:\nconst User = mongolass.model('User', {\n  name: { type: 'string' },\n  age: { type: 'number' }\n});\nwill create inner schema named `UserSchema`.\n */\n\nUser\n  .insertOne({ name: 'nswbmw', age: 'wrong age' })\n  .exec()\n  .then(console.log)\n  .catch(function (e) {\n    console.error(e);\n    console.error(e.stack);\n  });\n/*\n{ [Error: ($.age: \"wrong age\") âœ– (type: number)]\n  validator: 'type',\n  actual: 'wrong age',\n  expected: { type: 'number' },\n  path: '$.age',\n  schema: 'UserSchema',\n  model: 'User',\n  plugin: 'MongolassSchema',\n  type: 'beforeInsertOne',\n  args: [] }\nError\n    at Model.insertOne (/Users/nswbmw/Desktop/mongolass-demo/node_modules/mongolass/lib/query.js:107:16)\n    at Object.<anonymous> (/Users/nswbmw/Desktop/mongolass-demo/app.js:23:4)\n    at Module._compile (module.js:409:26)\n    at Object.Module._extensions..js (module.js:416:10)\n    at Module.load (module.js:343:32)\n    at Function.Module._load (module.js:300:12)\n    at Function.Module.runMain (module.js:441:10)\n    at startup (node.js:139:18)\n    at node.js:974:3\n */\n```\n\nObjectId schema:\n\n```\n'use strict';\n\nconst Mongolass = require('mongolass');\nconst Schema = Mongolass.Schema;\nconst mongolass = new Mongolass('mongodb://localhost:27017/test');\n\nconst Post = mongolass.model('Post', {\n  author: { type: Mongolass.Types.ObjectId },\n});\n\nPost.insertOne({ author: '111111111111111111111111' })\n  .then(function () {\n    return Post.find({ author: '111111111111111111111111' });\n  })\n  .then(console.log);\n/*\n[ { _id: 57caed24ecda6ffb15962591,\n    author: 111111111111111111111111 } ]\n */\n```\n\n<!-- ## Why i hate Mongoose -->\n<!-- ## Why i don't like node-mongodb-native -->\n## What about Mongolass\n\nMongolass retains the api of [node-mongodb-native](https://github.com/mongodb/node-mongodb-native), and draws useful features of mongoose. Compared with node-mongodb-native, Mongolass has following three features:\n\n1. Elegant connection. eg:\n\n    **mongodb**\n\n    ```\n    MongoClient.connect(..., function(err, db) {\n      db.listCollections()\n    })\n    ```\n    **Mongolass**\n\n    ```\n    mongolass.connect(...)\n    mongolass.listCollections()\n    ```\n\n2. Optional schema, used for validating and formatting parameters before query or update.\n3. Awesome plugin system. eg: `beforeInsert`, `afterFind` and so on. You can define custom plugins.\n4. Detailed error information.\n\n## Schema\n\nsee [another-json-schema](https://github.com/nswbmw/another-json-schema).\n\n## Built-in plugins\n\nMongolass has some built-in plugins, only for `find` and `findOne`.\n\n- [limit](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [sort](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [fields(alias: select)](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [skip](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [hint](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [populate]()\n- [explain](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [snapshot](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [timeout](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [tailable](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [tailableRetryInterval](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [numberOfRetries](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [awaitdata](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [oplogReplay](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [exhaust](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [batchSize](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [returnKey](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [maxScan](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [min](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [max](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [showDiskLoc](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [comment](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [raw](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [readPreference](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [partial](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n- [maxTimeMS](http://mongodb.github.io/node-mongodb-native/2.1/api/Collection.html#findOne)\n\n#### Register plugin\n\n```\nmongolass.plugin(pluginName, hooks);// register global plugin\nUser.plugin(pluginName, hooks);// register model plugin\n```\n\nexamples:\n\n```\nUser.plugin('mw2', {\n  beforeInsert: function (...args) {\n  },\n  afterFind: function* (result, ...args) {\n    console.log(result, args);\n    ...\n  }\n});\n\nmongolass.plugin('mw1', {\n  beforeFind: function (...args) {\n    console.log(ctx._op);\n    console.log(ctx._args);\n    console.log(args);\n    ...\n  }\n});\n\nyield User.find().mw1().mw2().exec()// equal: yield User.find().mw1().mw2()\nUser.find().mw2().mw1().exec().then(...).catch(...)\nUser.find().mw1().mw2().exec(function (err, res) {\n  console.log(err, res)\n})\n```\n\n**NOTE**: Different order of calling plugins will output different results.\n\nsee [mongolass-plugin-populate](https://github.com/mongolass/mongolass-plugin-populate).\n\n## Test\n\n```\n$ npm test (coverage 100%)\n```\n\n## License\n\nMIT\n\n[npm-image]: https://img.shields.io/npm/v/mongolass.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/mongolass\n[travis-image]: https://img.shields.io/travis/mongolass/mongolass.svg?style=flat-square\n[travis-url]: https://travis-ci.org/mongolass/mongolass\n[david-image]: http://img.shields.io/david/mongolass/mongolass.svg?style=flat-square\n[david-url]: https://david-dm.org/mongolass/mongolass\n[license-image]: http://img.shields.io/npm/l/mongolass.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/mongolass.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/mongolass\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mongolass/mongolass/issues"
  },
  "homepage": "https://github.com/mongolass/mongolass",
  "_id": "mongolass@2.3.2",
  "_from": "mongolass@"
}
